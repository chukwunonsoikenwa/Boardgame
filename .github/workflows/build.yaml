name: Build and publish Docker image to ECR

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'  # optional: run on version tags

concurrency:
  group: build-and-push-ecr
  cancel-in-progress: true

jobs:
  build-and-push:
    name: Build and Push Docker Image to ECR
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3Ô∏è‚É£ Login to ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # 4Ô∏è‚É£ Set up Docker Buildx
      - name: Set up QEMU and Buildx (for multi-arch builds)
        uses: docker/setup-buildx-action@v2

      # 5Ô∏è‚É£ Build and push image to ECR
      - name: Build, tag, and push image to ECR
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REPOSITORY: boardgame        # ‚úÖ Change this if needed
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set -euo pipefail

          echo "üîπ Starting ECR build and push pipeline..."

          # Resolve AWS Account ID if not provided
          if [ -z "${AWS_ACCOUNT_ID:-}" ] || [ "${AWS_ACCOUNT_ID}" = "null" ]; then
            echo "‚ö†Ô∏è AWS_ACCOUNT_ID secret not set ‚Äî attempting to retrieve via STS..."
            AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          fi
          echo "‚úÖ Using AWS Account ID: ${AWS_ACCOUNT_ID}"

          ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          echo "‚úÖ Using ECR registry: ${ECR_REGISTRY}"
          echo "‚úÖ Using repository: ${ECR_REPOSITORY}"

          # Create repository if missing
          if ! aws ecr describe-repositories --repository-names "${ECR_REPOSITORY}" >/dev/null 2>&1; then
            echo "üì¶ Repository ${ECR_REPOSITORY} not found ‚Äî creating..."
            aws ecr create-repository --repository-name "${ECR_REPOSITORY}" >/dev/null
          fi

          # Build and push Docker image
          echo "üöÄ Building Docker image..."
          docker buildx build \
            --platform linux/amd64 \
            -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} \
            -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest \
            --push .

          echo "‚úÖ Image pushed to ECR: ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"

      # 6Ô∏è‚É£ Run vulnerability scan (warning only)
      - name: Scan image for vulnerabilities (Trivy)
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REPOSITORY: boardgame
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set +e  # do not fail on non-zero exit
          ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"

          echo "üîç Running Trivy vulnerability scan (HIGH, CRITICAL only)..."
          docker run --rm aquasec/trivy:0.43.1 image \
            --format table \
            --severity HIGH,CRITICAL \
            ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} || \
            echo "‚ö†Ô∏è Trivy detected HIGH/CRITICAL vulnerabilities (warning only, build will continue)."

          echo "‚úÖ Trivy scan complete ‚Äî warnings (if any) were logged, but build succeeded."
